// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // output   = "../src/infrastructure/persistence/prisma-client"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output = "./erd.svg"
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum CompanyStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    CLOSED
    TRIAL
    CANCELLED
}

enum Industry {
    HEALTHCORE
    AGRIBUSINESS
    TRANSPORTATION_MOBILITY
    TECHNOLOGY
}

enum Segment {
    LABORATORY
    HOSPITAL
    MEDICAL_METALLURGY
    ANIMAL_HEALTH
    VEHICLE_INSPECTION
    VEHICLE_REGISTRATION
    DRIVING_SCHOOL
}

enum BranchStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    OBSOLETE
}

enum DepartmentStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    OBSOLETE
}

enum EmploymentType {
    FULL_TIME
    PART_TIME
    CONTRACTOR
    TEMPORARY
    INTERN
}

enum EmployeeStatus {
    IN_PROCESS
    ACTIVE
    ON_LEAVE
    SUSPENDED
    TERMINATED
    OBSOLETE
}

enum TenantModuleStatus {
    ENABLED
    DISABLED
}

// Models
model Address {
    id           String  @id @default(cuid()) @map("id_address")
    street       String  @map("street")
    number       String  @map("number")
    complement   String? @map("complement")
    neighborhood String  @map("neighborhood")
    city         String  @map("city")
    state        String  @map("state")
    country      String  @default("BR") @map("country")
    zipCode      String  @map("zip_code")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    company Company?
    branch  Branch?

    @@map("addresses")
}

model Company {
    id          String  @id @default(cuid()) @map("id_company")
    tradingName String  @unique @map("trading_name")
    legalName   String  @map("legal_name")
    taxId       String  @unique @map("id_tax")
    taxCountry  String? @default("BR") @map("tax_country")
    email       String  @unique @map("company_email")
    phone       String? @map("company_phone")

    address   Address? @relation(fields: [addressId], references: [id])
    addressId String?  @unique @map("id_address")

    industry Industry
    segment  Segment

    status        CompanyStatus @default(ACTIVE) @map("company_status")
    isBaseCompany Boolean       @default(false) @map("is_base_company")
    createdAt     DateTime      @default(now()) @map("created_at")
    updatedAt     DateTime      @updatedAt @map("updated_at")

    branches                Branch[]
    employeeJobTitleHistory EmployeeJobTitleHistory[]
    jobTitleLevels          JobTitleLevel[]
    TenantModule            TenantModule[]

    @@unique([legalName, taxId])
    @@map("companies")
}

model Module {
    id          String   @id @default(cuid()) @map("id_module")
    code        String   @unique @map("module_code")
    name        String   @map("module_name")
    description String?  @map("module_description")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    tenantModules TenantModule[]

    @@map("modules")
}

model TenantModule {
    companyId String   @map("id_company")
    moduleId  String   @map("id_module")
    segment   Segment  @map("segment") 
    status    TenantModuleStatus @default(ENABLED) @map("module_status")
    enabledAt DateTime @default(now()) @map("enabled_at")
    disabledAt DateTime? @map("disabled_at")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    module  Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    @@id([companyId, moduleId])
    @@map("tenant_modules")
}

model Branch {
    id            String       @id @default(cuid()) @map("id_branch")
    taxId         String       @unique() @map("branch_tax_id")
    tradingName   String       @map("branch_trading_name")
    legalName     String       @map("branch_legal_name")
    code          String?      @map("branch_code")
    email         String?      @map("branch_email")
    phone         String?      @map("branch_phone")
    responsible   String?      @map("responsible_name")
    isHeadquarter Boolean      @default(false) @map("is_headquarter")
    status        BranchStatus @default(ACTIVE) @map("branch_status")

    address   Address? @relation(fields: [addressId], references: [id])
    addressId String?  @unique @map("id_address")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    company   Company @relation(fields: [companyId], references: [id])
    companyId String  @map("id_company")

    departments             Department[]
    employees               Employee[]
    jobTitles               JobTitle[]
    employeeJobTitleHistory EmployeeJobTitleHistory[]
    jobTitleLevels          JobTitleLevel[]

    @@unique([legalName, tradingName, companyId, code])
    @@map("branches")
}

model Department {
    id               String  @id @default(cuid()) @map("id_department")
    name             String  @map("department_name")
    code             String? @map("department_code")
    description      String? @map("description")
    responsibleName  String? @map("responsible_name")
    responsibleEmail String? @map("responsible_email")

    branch   Branch @relation(fields: [branchId], references: [id])
    branchId String @map("id_branch")

    status DepartmentStatus @default(ACTIVE) @map("department_status")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    employees Employee[]

    @@unique([name, branchId])
    @@map("departments")
}

model Employee {
    id    String  @id @default(cuid()) @map("id_employee")
    name  String  @map("employee_name")
    email String  @unique @map("employee_email")
    phone String? @map("employee_phone")

    departmentId String     @map("id_department")
    department   Department @relation(fields: [departmentId], references: [id])

    currentJobTitleVersionId String          @map("id_job_title_version")
    currentJobTitleVersion   JobTitleVersion @relation(fields: [currentJobTitleVersionId], references: [id])

    employmentType EmploymentType @default(FULL_TIME) @map("employment_type")
    status         EmployeeStatus @default(ACTIVE) @map("employee_status")

    hiredAt DateTime? @map("hired_at")
    leftAt  DateTime? @map("left_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    branch   Branch @relation(fields: [branchId], references: [id])
    branchId String @map("id_branch")

    jobTitleHistory EmployeeJobTitleHistory[]

    @@map("employees")
}

model JobTitle {
    id        String            @id @default(cuid()) @map("id_job_title")
    companyId String            @map("id_company")
    name      String            @map("job_title_name")
    code      String?           @map("job_title_code")
    createdAt DateTime          @default(now()) @map("created_at")
    versions  JobTitleVersion[]

    branch   Branch @relation(fields: [branchId], references: [id])
    branchId String @map("id_branch")

    @@unique([companyId, name])
    @@map("job_titles")
}

model JobTitleVersion {
    id               String   @id @default(cuid()) @map("id_job_title_version")
    jobTitleId       String   @map("id_job_title")
    version          Int      @map("version")
    description      String?  @map("description") @db.Text
    responsibilities String?  @map("responsibilities") @db.Text
    requirements     String?  @map("requirements") @db.Text
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @updatedAt @map("updated_at")

    jobTitle         JobTitle                  @relation(fields: [jobTitleId], references: [id], onDelete: Cascade)
    jobTitleLevels   JobTitleLevel[]
    jobTitleHistory  EmployeeJobTitleHistory[]
    currentEmployees Employee[]

    @@unique([jobTitleId, version])
    @@index([jobTitleId, version])
    @@map("job_title_versions")
}

model EmployeeJobTitleHistory {
    employeeId        String    @map("id_employee")
    jobTitleVersionId String    @map("id_job_title_version")
    companyId         String    @map("id_company")
    branchId          String    @map("id_branch")
    assignedAt        DateTime  @default(now()) @map("assigned_at")
    removedAt         DateTime? @map("removed_at")

    employee        Employee        @relation(fields: [employeeId], references: [id])
    jobTitleVersion JobTitleVersion @relation(fields: [jobTitleVersionId], references: [id])
    company         Company         @relation(fields: [companyId], references: [id])
    branch          Branch          @relation(fields: [branchId], references: [id])

    @@id([employeeId, jobTitleVersionId, assignedAt])
    @@index([companyId])
    @@index([branchId])
    @@map("employee_job_title_history")
}

model JobTitleLevel {
    id                String   @id @default(cuid()) @map("id_job_title_level")
    jobTitleVersionId String   @map("id_job_title_version")
    companyId         String   @map("id_company")
    branchId          String   @map("id_branch")
    label             String   @map("label") @db.VarChar(60)
    rank              Int?     @map("rank")
    salaryMin         Decimal? @map("salary_min") @db.Decimal(12, 2)
    salaryMax         Decimal? @map("salary_max") @db.Decimal(12, 2)
    createdAt         DateTime @default(now()) @map("created_at")
    updatedAt         DateTime @updatedAt @map("updated_at")

    jobTitleVersion JobTitleVersion @relation(fields: [jobTitleVersionId], references: [id], onDelete: Cascade)
    company         Company         @relation(fields: [companyId], references: [id])
    branch          Branch          @relation(fields: [branchId], references: [id])

    @@unique([jobTitleVersionId, label])
    @@index([jobTitleVersionId, label])
    @@index([companyId])
    @@index([branchId])
    @@map("job_title_levels")
}

model Teste {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("testes")
}
