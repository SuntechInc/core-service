name: Deploy Staging

on:
  push:
    branches:
      - staging

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "üîë Logando no Docker Hub..."
          echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
          echo "‚úÖ Login bem-sucedido!"

      - name: Build e Push da imagem para Staging
        run: |
          echo "üöÄ Construindo imagem Docker..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/core-service:staging .
          echo "üì§ Enviando imagem para Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/core-service:staging
          echo "‚úÖ Imagem enviada com sucesso!"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        env:
          DATABASE_URL_STAGING: ${{ secrets.DATABASE_URL_STAGING }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: DATABASE_URL_STAGING
          script: |
            echo "üîó Conectado √† VPS, iniciando deploy..."

            echo "üîç Verificando DATABASE_URL_STAGING..."
            if [ -z "$DATABASE_URL_STAGING" ]; then
              echo "‚ùå ERRO: DATABASE_URL_STAGING n√£o est√° definida!"
              exit 1
            else
              echo "‚úÖ DATABASE_URL_STAGING est√° OK!"
            fi

            echo "üì• Baixando nova vers√£o da imagem..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/core-service:staging

            echo "üåê Garantindo que a network polaris_network existe..."
            docker network inspect polaris_network >/dev/null 2>&1 || docker network create polaris_network

            if [ "$(docker ps -aq -f name=core_service_staging)" ]; then
              echo "üõë Parando e removendo container antigo..."
              docker stop core_service_staging
              docker rm core_service_staging
            else
              echo "‚ö†Ô∏è Nenhum container antigo encontrado, pulando remo√ß√£o."
            fi

            echo "‚öôÔ∏è Rodando migrations do Prisma..."
            export DATABASE_URL="${DATABASE_URL_STAGING}"
            docker run --rm \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              ${{ secrets.DOCKER_USERNAME }}/core-service:staging \
              npx prisma migrate deploy
            echo "‚úÖ Migrations aplicadas com sucesso!"

            echo "üöÄ Iniciando novo container de homologa√ß√£o..."
            docker run -d \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              --name core_service_staging \
              -p 3336:3336 \
              ${{ secrets.DOCKER_USERNAME }}/core-service:staging
            echo "‚úÖ Deploy finalizado com sucesso!"
