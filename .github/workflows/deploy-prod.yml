name: Deploy Production

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-prod:
    runs-on: ubuntu-latest

    steps:
      # üìå 1Ô∏è‚É£ Checkout do c√≥digo
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v3

      # üìå 2Ô∏è‚É£ Login no Docker Hub
      - name: Login no Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "üîë Logando no Docker Hub..."
          echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
          echo "‚úÖ Login bem-sucedido!"

      # üìå 3Ô∏è‚É£ Build e Push da Imagem Docker
      - name: Build e Push da imagem para Produ√ß√£o
        run: |
          echo "üöÄ Construindo imagem Docker..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/core-service:prod .
          
          echo "üì§ Enviando imagem para Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/core-service:prod
          
          echo "‚úÖ Imagem enviada com sucesso!"

      # üìå 4Ô∏è‚É£ Deploy via SSH para VPS
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        env:
          DATABASE_URL_PROD: ${{ secrets.DATABASE_URL_PROD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # Lista de vari√°veis que ser√£o passadas ao SSH:
          envs: DATABASE_URL_PROD
          script: |
            echo "üîó Conectado √† VPS, iniciando deploy..."

            echo "üîç Verificando DATABASE_URL_PROD..."
            if [ -z "$DATABASE_URL_PROD" ]; then
              echo "‚ùå ERRO: DATABASE_URL_PROD n√£o est√° definida!"
              exit 1
            else
              echo "‚úÖ DATABASE_URL_PROD est√° OK!"
            fi

            echo "üì• Baixando nova vers√£o da imagem..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/core-service:prod

            if [ "$(docker ps -q -f name=core_service)" ]; then
              echo "üõë Parando container antigo..."
              docker stop core_service
              docker rm core_service
            else
              echo "‚ö†Ô∏è Nenhum container antigo encontrado, pulando etapa."
            fi

            echo "‚öôÔ∏è Rodando migrations do Prisma..."
            export DATABASE_URL="${DATABASE_URL_PROD}"
            docker run --rm \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              ${{ secrets.DOCKER_USERNAME }}/core-service:prod \
              npx prisma migrate deploy
            echo "‚úÖ Migrations aplicadas com sucesso!"

            echo "üöÄ Iniciando novo container de produ√ß√£o..."
            docker run -d \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              --name core_service \
              -p 3334:3334 \
              ${{ secrets.DOCKER_USERNAME }}/core-service:prod
            echo "‚úÖ Deploy finalizado com sucesso!"