name: Deploy Production

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-prod:
    runs-on: ubuntu-latest

    steps:
      # 📌 1️⃣ Checkout do código
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # 📌 2️⃣ Login no Docker Hub
      - name: Login no Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo "🔑 Logando no Docker Hub..."
          echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
          echo "✅ Login bem-sucedido!"

      # 📌 3️⃣ Build e Push da Imagem Docker
      - name: Build e Push da imagem para Produção
        run: |
          echo "🚀 Construindo imagem Docker..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/core-service:prod .
          
          echo "📤 Enviando imagem para Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/core-service:prod
          
          echo "✅ Imagem enviada com sucesso!"

      # 📌 4️⃣ Deploy via SSH para VPS
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        env:
          DATABASE_URL_PROD: ${{ secrets.DATABASE_URL_PROD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: DATABASE_URL_PROD
          script: |
            echo "🔗 Conectado à VPS, iniciando deploy..."

            echo "🔍 Verificando DATABASE_URL_PROD..."
            if [ -z "$DATABASE_URL_PROD" ]; then
              echo "❌ ERRO: DATABASE_URL_PROD não está definida!"
              exit 1
            else
              echo "✅ DATABASE_URL_PROD está OK!"
            fi

            echo "📥 Baixando nova versão da imagem..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/core-service:prod

            # 📌 1️⃣ Criar network se não existir
            echo "🌐 Garantindo que a network polaris_network existe..."
            docker network inspect polaris_network >/dev/null 2>&1 || docker network create polaris_network

            # 📌 2️⃣ Parar e remover o container antigo corretamente
            if [ "$(docker ps -aq -f name=core_service)" ]; then
              echo "🛑 Parando e removendo container antigo..."
              docker stop core_service
              docker rm core_service
            else
              echo "⚠️ Nenhum container antigo encontrado, pulando remoção."
            fi

            # 📌 3️⃣ Rodar migrations do Prisma dentro da mesma network
            echo "⚙️ Rodando migrations do Prisma..."
            export DATABASE_URL="${DATABASE_URL_PROD}"
            docker run --rm \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              ${{ secrets.DOCKER_USERNAME }}/core-service:prod \
              npx prisma migrate deploy
            echo "✅ Migrations aplicadas com sucesso!"

            # 📌 4️⃣ Iniciar novo container da Produção
            echo "🚀 Iniciando novo container de produção..."
            docker run -d \
              --network=polaris_network \
              -e DATABASE_URL="$DATABASE_URL" \
              --name core_service \
              -p 3334:3334 \
              ${{ secrets.DOCKER_USERNAME }}/core-service:prod
            echo "✅ Deploy finalizado com sucesso!"
