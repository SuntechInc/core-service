model Company {
  id          String  @id @default(cuid()) @map("id_company")
  tradingName String  @unique @map("trading_name")
  legalName   String  @map("legal_name")
  taxId       String  @unique @map("id_tax")
  email       String  @unique @map("company_email")
  phone       String? @map("company_phone")

  industry Industry
  segment  Segment

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  branches Branch[]

  @@unique([legalName, taxId])
  @@map("companies")
}

enum Industry {
  HEALTHCORE
  AGRIBUSINESS
  TRANSPORTATION_MOBILITY
  TECHNOLOGY
}

enum Segment {
  LABORATORY
  HOSPITAL
  MEDICAL_METALLURGY
  ANIMAL_HEALTH
  VEHICLE_INSPECTION
  VEHICLE_REGISTRATION
  DRIVING_SCHOOL
}

model Branch {
  id   String @id @default(cuid()) @map("id_branch")
  name String @map("branch_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("id_company")

  departments Department[]
  Employee    Employee[]
  JobTitle    JobTitle[]

  @@unique([name, companyId])
  @@map("branches")
}

model Department {
  id       String  @id @default(cuid()) @map("id_department")
  name     String  @map("department_name")
  Branch   Branch? @relation(fields: [branchId], references: [id])
  branchId String? @map("id_branch")

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Employee  Employee[]

  @@unique([name, branchId])
  @@map("departments")
}

model Employee {
  id                String  @id @default(cuid()) @map("id_employee")
  name              String  @map("employee_name")
  email             String  @unique @map("employee_email")
  phone             String? @map("employee_phone")
  departmentId      String  @map("id_department")
  branchId          String  @map("id_branch")
  jobTitleVersionId String  @map("id_job_title_version")

  employmentType EmploymentType @default(FULL_TIME) @map("employment_type")
  status         EmployeeStatus @default(IN_PROCESS) @map("employee_status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  jobTitleVersion JobTitleVersion @relation(fields: [jobTitleVersionId], references: [id])
  branch          Branch          @relation(fields: [branchId], references: [id])
  department      Department      @relation(fields: [departmentId], references: [id])

  @@map("employees")
}

enum EmploymentType {
  FULL_TIME
  CONTRACTOR
}

enum EmployeeStatus {
  IN_PROCESS // Ainda em fase de admissão
  ACTIVE // Funcionário ativo e validado pelo RH
  ON_LEAVE // Funcionário em período de férias
  SUSPENDED // Funcionário afastado (ex.: licença médica)
  TERMINATED // Funcionário desligado da empresa
}

model JobTitle {
  id   String @id @default(cuid()) @map("id_job_title")
  name String @map("job_title_name")

  branchId String @map("id_branch")
  branch   Branch @relation(fields: [branchId], references: [id])

  // Relação 1:1 para a versão atual (opcional)
  currentVersionId String?          @unique
  currentVersion   JobTitleVersion? @relation(name: "CurrentJobTitleVersion", fields: [currentVersionId], references: [id])

  // Relação 1:N para o histórico de versões
  versions JobTitleVersion[] @relation(name: "JobTitleVersions")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, branchId])
  @@map("job_titles")
}

model JobTitleVersion {
  id String @id @default(cuid()) @map("id_job_title_version")

  // (1) Relação 1:N com JobTitle para histórico
  jobTitleId String   @map("id_job_title")
  jobTitle   JobTitle @relation(name: "JobTitleVersions", fields: [jobTitleId], references: [id], onDelete: Cascade)

  // (2) Relação 1:1 com JobTitle para "versão atual"
  // O lado oposto é JobTitle.currentVersion
  usedAsCurrentIn JobTitle? @relation(name: "CurrentJobTitleVersion")

  version      Int     @default(1) @map("version_number")
  salary       Decimal @map("salary")
  requirements String? @map("requirements")

  effectiveFrom DateTime   @default(now()) @map("effective_from")
  createdAt     DateTime   @default(now()) @map("created_at")
  Employee      Employee[]

  @@unique([jobTitleId, version])
  @@map("job_title_versions")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/infrastructure/persistence/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
